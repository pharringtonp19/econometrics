data Bool : Set where
  true : Bool
  false : Bool

not : Bool → Bool
not true = false
not false = true

idBool : {X : Set} → X → X
idBool x = x

example : {P Q : Set} → P → (Q → P)
example {P} {Q} p = f
  where
    f : Q → P
    f _ = p

example' : {P Q : Set} → P → (Q → P)
example' p = λ q → p

open import binary-products

ex : {P Q : Set} → P × Q → Q × P
ex (p , q) = (q , p) 

data ℕ : Set where
  zero : ℕ
  suc : ℕ → ℕ
