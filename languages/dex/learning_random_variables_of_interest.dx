

'### Set-Up 
In some contexts, the estimand, $\beta$, can be expressed the application of a functional, $\gamma$, to the measure, $\mathbb{P}$.

'$$ \begin{aligned}
&\gamma :: {\mathcal{X} \to [0,1]} \to \mathcal{R}  \\\\
&\beta = \gamma \ \mathbb{P}\end{aligned}$$

'Where $\gamma$ is defined via integration:

'$$ \begin{aligned}
&\mathcal{I} :: ({\mathcal{X} \to \mathcal{R}}) \to (\mathcal{B}(\mathcal{X}) \to \mathcal{R}) \to \mathcal{R}  \\\\
&\gamma = \mathcal{I} \ f\end{aligned}$$

'Like the probability measure, $f$ must be learned from the data. Therefore our estimator has the following signature:

'$$ \begin{aligned}
&\hat{\mathbb{P}}_n :: \Omega _n \to \mathcal{B}(\mathcal{X}) \to [0,1] \\\\
&\hat{f}_n :: \Omega_n \to \mathcal{X} \to \mathcal{R}\\\\
&\hat{\beta} :: \Omega_n \to \Omega_n \to \mathcal{R} \\\\\ \end{aligned}$$

'### Structure

def (.*.) {a b c} (f : (b -> c)) (g : (a -> b)) : (a -> c) = 
    \x. f $ g x 

data Interval  = 
    AsInterval {lower: Float & upper: Float}

def empirical_measure (n : Nat ) (key: Key) (interval:Interval ) : Float = 
    xs : (Fin n => Float) = arb key 
    (AsInterval I') = interval
    l = get_at #lower I'
    u = get_at #upper I' 
    mean for i. b_to_f $ (xs.i >= l) && (xs.i <= u)

def integrate (n: Nat) (llim: Float) (ulim: Float) (f : Float -> Float) (measure : Interval -> Float) = 
    xs = linspace (Fin n) llim ulim 
    delta = (ulim - llim) / (n_to_f n)
    sum for i. (f xs.i) * (measure (AsInterval {lower = xs.i, upper = xs.i + delta}))

def test_measure (I: Interval) : Float =
    (AsInterval I') = I
    l = get_at #lower I'
    u = get_at #upper I' 
    u - l

def functional (target: Float -> Float) (f: Float -> Float) (measure:Interval -> Float) : Float = 
    g = \x. (\y. y*y) ((target x) - (f x))
    integrate 1000 (-3.0) (3.0) g measure 

def fhat (key: Key) (x: Float) : Float = 
    p : Float = arb key 
    p * x 

def estimator (k1: Key) (k2: Key): Float = 
    (integrate 100 (-3.0) 3.0) (fhat k1) (empirical_measure 1000 k2 )

'### Basics

'##### Relu 
Takes a scalar value and will return the same value if it's greater than zero. Otherwise, it returns 0. 

def relu (input : Float) : Float =
  select (input > 0.0) input 0.0

'##### DenseParams 
Is a type constructor. It takes two ordered types, and creates a new type consisting of two "tables"

def DenseParams  (a: Type) (b : Type) [Ix a, Ix b]: Type = 
    ((a=>b=>Float) & (b=>Float))

'##### Layer 
Is a type constructor. It takes three types as inputs and returns record consisting of two functions  
- forward
- init

data Layer inp:Type out:Type params:Type =
  AsLayer {forward:(params -> inp -> out) & init:(Key -> params) }

'##### Dense 
Is a type constructor the also implements the necessary functions for layer 

def dense (a : Type) (b : Type) [Ix a, Ix b] : Layer (a=>Float) (b=>Float) (DenseParams a b) = 
    AsLayer {
        forward = (\ ((weight, bias)) x . 
            for j. (bias.j + sum for i. weight.i.j * x.i)), 
        init = arb
    }

def forward_pass {i o p} (l : Layer i o p) (p  : p) (x : i) : o = 
    (AsLayer l' ) = l --what?
    (get_at #forward l') p x

def initialize_params {i o p} (l:Layer i o p) (key: Key) : p = 
    (AsLayer l') = l               -- Removes the value constructor 
    initializer = (get_at #init l') -- project out the initializer function
    initializer key  

def MLP (a:Nat) (b:Nat) =
  layer1 = dense (Fin a) (Fin b)
  layer2 = dense (Fin b) (Fin 1)
  AsLayer {
    forward = (\ (params1, params2) x.
         x1' = forward_pass layer1 params1 x
         x1 = for i. relu x1'.i
         forward_pass layer2 params2 x1),
    init = (\key.
         [k1, k2] = split_key key
         (initialize_params layer1 k1, initialize_params layer2 k2))
  }


n_obs : Nat = 100 
n_features : Nat = 1

model = MLP n_features 32 
:t model


[key_params, key_data] = split_key $ new_key 1 
[key_xs, key_ys] = split_key key_data
init_params = initialize_params model key_params


xs : ((Fin n_obs) => (Fin n_features) => Float) = arb key_xs 
ys : ((Fin n_obs) => (Fin 1) =>  Float) = for i. sin xs.i --arb key_ys 

:t xs 


