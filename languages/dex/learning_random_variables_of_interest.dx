

'### Set-Up 
In some contexts, the estimand, $\beta$, can be expressed the application of a functional, $\gamma$, to the measure, $\mathbb{P}$.

'$$ \begin{aligned}
&\gamma :: {\mathcal{X} \to [0,1]} \to \mathcal{R}  \\\\
&\beta = \gamma \ \mathbb{P}\end{aligned}$$

'Where $\gamma$ is defined via integration:

'$$ \begin{aligned}
&\mathcal{I} :: ({\mathcal{X} \to \mathcal{R}}) \to (\mathcal{B}(\mathcal{X}) \to \mathcal{R}) \to \mathcal{R}  \\\\
&\gamma = \mathcal{I} \ f\end{aligned}$$

'Like the probability measure, $f$ must be learned from the data. Therefore our estimator has the following signature:

'$$ \begin{aligned}
&\hat{\mathbb{P}}_n :: \Omega _n \to \mathcal{B}(\mathcal{X}) \to [0,1] \\\\
&\hat{f}_n :: \Omega_n \to \mathcal{X} \to \mathcal{R}\\\\
&\hat{\beta} :: \Omega_n \to \Omega_n \to \mathcal{R} \\\\\ \end{aligned}$$

'### Structure

def (.*.) {a b c} (f : (b -> c)) (g : (a -> b)) : (a -> c) = 
    \x. f $ g x 

data Interval  = 
    AsInterval {lower: Float & upper: Float}

def empirical_measure (n : Nat ) (key: Key) (interval:Interval ) : Float = 
    xs : (Fin n => Float) = arb key 
    (AsInterval I') = interval
    l = get_at #lower I'
    u = get_at #upper I' 
    mean for i. b_to_f $ (xs.i >= l) && (xs.i <= u)

def integrate (n: Nat) (llim: Float) (ulim: Float) (f : Float -> Float) (measure : Interval -> Float) = 
    xs = linspace (Fin n) llim ulim 
    delta = (ulim - llim) / (n_to_f n)
    sum for i. (f xs.i) * (measure (AsInterval {lower = xs.i, upper = xs.i + delta}))

def test_measure (I: Interval) : Float =
    (AsInterval I') = I
    l = get_at #lower I'
    u = get_at #upper I' 
    u - l

def functional (target: Float -> Float) (f: Float -> Float) (measure:Interval -> Float) : Float = 
    g = \x. (\y. y*y) ((target x) - (f x))
    integrate 1000 (-3.0) (3.0) g measure 

def fhat (key: Key) (x: Float) : Float = 
    p : Float = arb key 
    p * x 

def estimator (k1: Key) (k2: Key): Float = 
    (integrate 100 (-3.0) 3.0) (fhat k1) (empirical_measure 1000 k2 )


:t estimator

[k1, k2] = split_key $ new_key 2 

estimator k1 k2 

-- keys = split_key key :: Fin 100=>Key
-- mean $ map estimator keys 
